# O modulo random do Python fornece fun√ß√µes para gerar n√∫meros aleat√≥rios e 
# fazer opera√ß√µes relacionadas e aleatorias, como sorteios, escolhas aleat√≥rias e embaralhamento de dados.
# Aqui no jogo ele foi necess√°rio para usar a fun√ß√£o random.choice, que sorteia aleatoriamente a moeda com cara ou coroa,
# que eu vou mostrar mais adiante.

import random

# Vari√°vel que define o nome do arquivo, onde as pontua√ß√µes dos jogadores ser√£o salvas.

ARQUIVO_RANKING = "ranking.txt"

# Abre o arquivo chamado "ranking.txt", atrav√©s da vari√°vel "ARQUIVO_RANKING" e converte os pontos 
# (que est√£o como strings) para inteiros, gerando uma lista de tuplas do tipo (nome, pontos).
# Se o arquivo n√£o existir, retorna uma lista vazia (FileNotFoundError).

def ler_ranking():
    try:
        with open(ARQUIVO_RANKING, "r") as arquivo:
            linhas = arquivo.readlines()
            ranking = [linha.strip().split(",") for linha in linhas]
            ranking = [(nome, int(pontos)) for nome, pontos in ranking]
            return ranking
    except FileNotFoundError:
        return []

# Salva a pontua√ß√£o de um jogador no final do arquivo "ranking.txt".
# Abre o arquivo definido pela vari√°vel "ARQUIVO_RANKING" no modo append ("a"), 
# o que significa que o conte√∫do ser√° adicionado ao final do arquivo, sem apagar o que j√° existe.

def salvar_pontuacao(nome, pontuacao):
    with open(ARQUIVO_RANKING, "a") as arquivo:
        arquivo.write(f"{nome},{pontuacao}\n")

# Mostra o ranking de forma organizada, com os jogadores em ordem decrescente de pontos.

def mostrar_ranking():
    ranking = ler_ranking()
    if not ranking:
        print("\nNenhum jogador no ranking ainda.\n")
        return

    print("\nüèÜ Ranking dos Jogadores üèÜ")
    ranking.sort(key=lambda x: x[1], reverse=True)
    for i, (nome, pontos) in enumerate(ranking, 1):
        print(f"{i}. {nome} - {pontos} ponto(s)")
    print()

# Exibe as op√ß√µes dispon√≠veis com emojis.

def mostrar_opcoes_com_emojis():
    print("\nEscolha uma das op√ß√µes:")
    print("1Ô∏è‚É£  üôÇ  Cara")
    print("2Ô∏è‚É£  üëë  Coroa")



# D√° boas-vindas ao jogador e pede o nome do jogador.
# Define as op√ß√µes poss√≠veis e emojis associados.
# Tamb√©m mostra o historico que guarda o resultado de cada jogada.
# A pontuacao come√ßa em 0.

def jogar():
    print("ü™ô  Bem-vindo ao jogo de Cara ou Coroa!\n")
    nome = input("Digite seu nome: ")
    opcoes = ["cara", "coroa"]
    emojis = {"cara": "üôÇ", "coroa": "üëë"}
    historico = []
    pontuacao = 0


# Loop cont√≠nuo at√© o jogador digitar "sair".

    while True:
        mostrar_opcoes_com_emojis()
        
        
# O usu√°rio pode escolher a op√ß√£o, cara ou coroa, sair do jogo ou ver o ranking.

        escolha_usuario = input("Digite 'cara' ou 'coroa' / 'sair' para encerrar / 'ranking' para ver ranking): ").lower()

        
# Esse trecho de c√≥digo abaixo, n√£o √© uma fun√ß√£o, mas usa fun√ß√µes como: "mostrar_ranking()" e "salvar_pontuacao()"
# dentro de uma estrutura de decis√£o (if) e controle de la√ßo (continue ou break). 

        if escolha_usuario == "ranking":
            mostrar_ranking()
            continue

        if escolha_usuario == "sair":
            print(f"\n{nome}, voc√™ terminou com {pontuacao} ponto(s)!")
            salvar_pontuacao(nome, pontuacao)
            print("\nHist√≥rico de jogadas:")
            for i, (escolha, resultado, acertou) in enumerate(historico, 1):
                status = "Acertou!" if acertou else "Errou!"
                print(f"{i}. Voc√™ escolheu {escolha} {emojis[escolha]}, saiu {resultado} {emojis[resultado]} ‚Üí {status}")
            break

        if escolha_usuario not in opcoes:
            print("Escolha inv√°lida. Tente novamente com 'cara' ou 'coroa'.\n")
            continue
        
# random.choice √© uma fun√ß√£o do m√≥dulo random do Python, que serve para escolher aleatoriamente um item de uma sequ√™ncia.         
# A moeda √© "jogada" com random.choice.
# √à a l√≥gica principal do jogo de cara ou coroa, realizar o sorteio e verificar se o jogador acertou ou n√£o. 

        resultado = random.choice(opcoes)
        acertou = escolha_usuario == resultado

# Se o usu√°rio acertar ganha ponto.
# Mostra o resultado da jogada e se acertou ou errou.

        if acertou:
            pontuacao += 1

        print(f"\nü™ô Jogando a moeda...")
        print(f"Resultado: {resultado.upper()} {emojis[resultado]}")
        print("üéâ Voc√™ acertou!\n" if acertou else "‚ùå Voc√™ errou!\n")

# Essa linha de c√≥digo registra uma jogada, mas n√£o definem uma fun√ß√£o. 
# Guarda os dados de cada jogada para poder, por exemplo, exibir o hist√≥rico depois.
# Cada jogada √© salva com a escolha, o resultado e se acertou ou n√£o.
  
        historico.append((escolha_usuario, resultado, acertou))

# Essa linha de c√≥digo inicia o jogo chamando a fun√ß√£o jogar().

jogar()
